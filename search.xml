<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6 symbol对象</title>
      <link href="/sword__song__blog/2021/04/27/symbol-dui-xiang/"/>
      <url>/sword__song__blog/2021/04/27/symbol-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="Symbol（符号）-类型"><a href="#Symbol（符号）-类型" class="headerlink" title="Symbol（符号） 类型"></a>Symbol（符号） 类型</h1><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h3><ul><li>确保对象属性的使用的<strong>唯一标识符</strong></li><li>创建唯一记号，用作非字符串形式的对象属性</li></ul><h3 id="2-声明定义方式"><a href="#2-声明定义方式" class="headerlink" title="2. 声明定义方式"></a>2. 声明定义方式</h3><ul><li><p>常规</p>  <pre class="line-numbers language-none"><code class="language-none">    let hh = Symbol('你好');let edu = Symbol('你好');// ‘’ 里面写描述console.log(hh == edu)console.log(hh)console.log(hh.description) // 输出描述/*falseSymbol(你好)你好*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>symbol.for 定义全局注册表,并记录在内存中（运行时的不同部分需要共享和重用符号实例）</p>  <pre class="line-numbers language-none"><code class="language-none">let com = Symbol.for('hh')    let mmm = Symbol.for('hh')    console.log(com == mmm)    /*    true    */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>symbol.keyFor()查询<strong>全局注册表</strong></p>  <pre class="line-numbers language-none"><code class="language-none">\\ 全局let s = symbol.for('hh')symbol.keyFor(s)  // hh\\ 普通let s = symbol('hh')symbol.keyFor(s)  // undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-解决字符串耦合问题"><a href="#3-解决字符串耦合问题" class="headerlink" title="3. 解决字符串耦合问题"></a>3. 解决字符串耦合问题</h3><ul><li><p>声明时，key相同，数据不会重复显示</p>  <pre class="line-numbers language-none"><code class="language-none">let hh ={    song:{js:100 , css :50},    song:{js:60 , css:100}}console.log(hh)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210428092009035.png" alt="image-20210428092009035"></p></li><li><p>声明时加上symbol</p>  <pre class="line-numbers language-none"><code class="language-none"> let user1 ={        name:'song',        key:Symbol('song')    };    let user2 ={        name:'song',        key:Symbol('song')    };let hh ={    [user1.key]:{js:100 , css :50},    [user2.key]:{js:60 , css:100}};console.log(hh);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210428092714562.png" alt="image-20210428092714562"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模板字面量</title>
      <link href="/sword__song__blog/2021/04/25/es6-mo-ban-zi-mian-liang/"/>
      <url>/sword__song__blog/2021/04/25/es6-mo-ban-zi-mian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-模板字面量"><a href="#ES6-模板字面量" class="headerlink" title="ES6 模板字面量"></a>ES6 模板字面量</h1><h3 id="1-基本含义"><a href="#1-基本含义" class="headerlink" title="1. 基本含义"></a>1. 基本含义</h3><ul><li><p>保留换行字符，跨行定义字符串</p>  <pre class="line-numbers language-none"><code class="language-none">let hh = '我是\n宋泽剑'let hh =  `我是宋泽剑 `/*我是宋泽剑*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>保持反引号内部的空格</p>  <pre class="line-numbers language-none"><code class="language-none">let hh =  `我是宋泽剑 `console.log(hh.length)   //47<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="2-支持字符串插值"><a href="#2-支持字符串插值" class="headerlink" title="2.支持字符串插值"></a>2.支持字符串插值</h3><ul><li><p>插值表达式：<code>${}</code> </p></li><li><p>可以放变量，还可以进行运算</p>  <pre class="line-numbers language-none"><code class="language-none">let value = 5let exponet = 'second'let hh = `${value} to the ${exponet} power is ${value * value}`;// 5 to the second power is 25  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以插入函数和方法</p>  <pre class="line-numbers language-none"><code class="language-none">function hh(word){return`${word[0].toUpperCase}${word.slice(1)}`}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-模板自面量标签函数"><a href="#3-模板自面量标签函数" class="headerlink" title="3. 模板自面量标签函数"></a>3. 模板自面量标签函数</h3><ul><li><p>标签函数会接受被插值记号分隔后的模板和表达式求值的结果</p>  <pre class="line-numbers language-none"><code class="language-none">function simpleTag(strings, aValExpression, bValExpression, sumExpression) {  console.log(strings);  console.log(aValExpression);  console.log(bValExpression);  console.log(sumExpression);  return 'foobar'; } let a = 6;let b = 9;let hh = simpleTag`${a} + ${b} = ${a+b}`// strings ==&gt; ""," + "," + = ","" 分隔后的模板// 6// 9// 15<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-原始字符串"><a href="#4-原始字符串" class="headerlink" title="4.原始字符串"></a>4.原始字符串</h3><ul><li><p>获取原始内容</p>  <pre class="line-numbers language-none"><code class="language-none">console.log(`\u00A9`)   //© <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>String.raw  字母含义</p>  <pre class="line-numbers language-none"><code class="language-none">console.log(String.raw`\u00A9`)// \u00A9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS动画基础</title>
      <link href="/sword__song__blog/2021/04/24/css-dong-hua-ji-chu/"/>
      <url>/sword__song__blog/2021/04/24/css-dong-hua-ji-chu/</url>
      
        <content type="html"><![CDATA[<p></p><div class="demo-1">        <div class="circle">            <div class="word"><p>简 单 动 画</p></div>        </div>    </div><style>.demo-1 .circle {  width: 200px;  height: 200px;  background: #FFFF99;  margin: 0 auto;  border-radius: 50%;  position: relative;  animation: jump 1.5s cubic-bezier(0.41, -0.04, 0.93, 0.29)  infinite alternate;}@keyframes jump {  0% {    transform: translateX(0px);  }  40% {    transform: translateX(150px);    clip-path: ellipse(50% 50% at 50% 50%);  }  50% {    transform: translateX(150px);    clip-path: ellipse(46% 50% at 46% 50%);  }  90% {    transform: translateX(0px);    clip-path: ellipse(50% 50% at 50% 50%);  }  100% {    transform: translateX(0px);    clip-path: ellipse(80% 50% at 80% 50%);  }}.demo-1 .circle .word {  position: absolute;  top: 50%;  left: 50%;  transform: translate(-50%, -50%);  background: #CC9999;  border-radius: 30%;  height:30px;}.demo-1 .circle .word p {  color: #666699;}</style><div id="catalog">索引</div><style>#catalog{            color: #1CA28A;            font-size: 30px;            font-weight: bold;            width: 60px;            height: 40px;            animation: bigger 2s ease-in 0.5s  infinite alternate;            font-family:"微软雅黑","黑体","宋体";        margin-left：50px;        }         @keyframes bigger {            0%{                transform:scale(0.7);            }            50%{                transform:scale(0.9);            }            100%{                transform:scale(1.2);            }        }</style><style>        #side-menu {            list-style: none;            border: 3px solid #1CA28A    ;            border-radius: 10px;            width: 300px;            padding: 20px;            background: #88AE5C;        margin:0 auto;        margin-bottom: 50px;        }        #side-menu li {            font-size: 18px;            line-height: 2.4em;            border-bottom: dotted 1px grey ;            /* 添加分隔符 */        }        #side-menu span{            font-weight: bolder;            color: khaki;        }         #side-menu li:last-child {            border: none;            /* 取消最后一个分隔符 */        }        #side-menu li a {            color: #EFD735    ;            text-decoration: none;        }        #side-menu li a:hover {            color: rgb(255, 100, 200);        }</style><ul id="side-menu">    <li><a href="#download"><span>①</span> 介绍</a></li>    <li><a href="#unzip"><span>②</span> Transition 基础写法和经验</a></li>    <li><a href="#settings"><span>③</span> animation 写法和经验总结</a></li>    <li><a href="#compile"><span>④</span> 时间函数</a></li></ul><div style="width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;" id="download"><strong><span>①</span> 介绍</strong></div><ul><li>css3动画包括 <strong>transtion</strong> 和 <strong>animation</strong>   </li><li></li><li>动画常和<strong>transform属性</strong>常用</li><li></li><li>transform并不是动画属性</li></ul><div style="width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;" id="unzip"><strong><span>②</span> Transition 基础写法和经验</strong></div><p><strong>过渡</strong></p><p><strong>基础写法</strong>  ：  属性名称   过渡时间   时间函数   延迟时间    （顺序 书写规范）</p><p><strong>用法注意</strong>： </p><ul><li>①属性有变化的时候才会过渡   </li><li>②初始化后再应用   </li><li>③时间函数改变动画速度</li></ul><p>tip： </p><ul><li>1.display 不能和transition一起使用  （文档流限制）</li><li></li><li>2.transition 尽量不用all</li><li></li><li>3.常见的闪动   我们可以  perspective  和 backface-visibility</li><li></li><li>4.详见时间函数 <a href="https://blog.csdn.net/zhy13087344578/article/details/79651857">时间函数</a></li></ul><p><strong>拓展：</strong></p><p><strong>transform属性</strong>：<a href="https://www.w3school.com.cn/cssref/pr_transform.asp">教程</a></p><p>transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行<strong>旋转、缩放、移动或倾斜</strong>。</p><p>常见属性</p><ul><li><strong>translate</strong>  translateX translateY   x轴 y轴 定向移动    单位：百分比或者px</li><li></li><li><strong>scaleX（x，y）</strong>  缩放比例  填倍数</li><li></li><li><strong>rotate(<em>angle</em>)</strong>   旋转角度   rotate(60deg)</li><li></li><li><strong>skew（angle）</strong>  倾斜角度</li></ul><div style="width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;" id="settings"><strong><span>③</span> animation 写法和经验总结</strong></div><p><strong>组建动画</strong></p><p><strong>基础写法</strong>：<a href="https://www.w3school.com.cn/cssref/pr_animation.asp">教程</a></p><p> 动画名称（name）–@keyframe    过渡时间     时间函数   延迟时间</p><p>播放次数   播放方向   停止播放   是否暂停</p><p>tip：</p><ul><li>1.animation 解决了transtion display：none  的BUG   （手动添加）</li><li></li><li>2.可实现跳动  根据百分比切换</li></ul><div style="width:92%;color:#EFD735;font-size:25px;display: inline-block;margin-top:20px;margin-bottom:20px;" id="compile"><strong><span>④</span> 时间函数</strong></div><ul><li><a href="https://blog.csdn.net/zhy13087344578/article/details/79651857">时间函数</a></li><li></li><li>线性 ：cubic-bezier  实现动画的线性过渡</li><li></li><li>非线性：steps （1，start|end）  实现动画的阶跃变化</li></ul><p><strong>简单应用：</strong></p><p>loading：<br><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/f22d4de2-0638-47c1-8d21-4e4beacb6e12.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript变量理解</title>
      <link href="/sword__song__blog/2021/04/24/javascript-bian-liang-li-jie/"/>
      <url>/sword__song__blog/2021/04/24/javascript-bian-liang-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript变量理解"><a href="#JavaScript变量理解" class="headerlink" title="JavaScript变量理解"></a>JavaScript变量理解</h1><p><strong>var&amp;&amp;let&amp;&amp;const</strong></p><p>ECMAScript变量是<strong>松散类型</strong>的，也就意味这，变量可以保存任何类型的数据。每个变量只不过是一个用于<strong>保存任意值的命名占位符</strong></p><hr><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><ul><li><p>声明作用域为函数</p>  <pre class="line-numbers language-none"><code class="language-none">function hh(){var a = 'hh'}hh();console.log(a);   // 错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>var 声明提升</p><p>  所谓提升，就是将声明拉到函数作用域的顶部 （只拉声明 ，不拉赋值）</p>  <pre class="line-numbers language-none"><code class="language-none">function com(){console.log(a);var a = 'hh'}com()   // undefined 并未出现报错// 上述代码等于function com(){var a;console.log(a);a = 'hh';}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li><p>块作用域  块 ===》 <code>{}</code></p>  <pre class="line-numbers language-none"><code class="language-none">if(true) {let age = 26;console.log(age);  // 26}console,log(age);    // ReferenceError:26未定义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>声明不会被提升</p></li><li><p>可全局声明 ，但不会成为window对象的属性（var）</p></li><li><p>不允许重复声明</p></li></ul><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><ul><li><p>与let相似 唯一一个重要的区别是<strong>声明变量时必须要初始化，且不允许修改</strong></p>  <pre class="line-numbers language-none"><code class="language-none">const a ;  // 错误cosnt a = 5 ; // const 也不允许重复声明const name = '白小剑'const name = '秦始皇' // SyntaxError<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="生命风格以及最佳实践"><a href="#生命风格以及最佳实践" class="headerlink" title="生命风格以及最佳实践"></a>生命风格以及最佳实践</h3><ul><li><p>不使用 <strong>var</strong></p></li><li><p><strong>const</strong> 优先 <strong>let</strong> 次之</p><p>  使用<strong>const</strong> 可以使浏览器强制保持变量不变 ， 只在提前知道变量会修改时使用<strong>let</strong>来声明</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基本语法</title>
      <link href="/sword__song__blog/2021/04/21/javascript-ji-ben-yu-fa/"/>
      <url>/sword__song__blog/2021/04/21/javascript-ji-ben-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-基本语法"><a href="#JavaScript-基本语法" class="headerlink" title="JavaScript 基本语法"></a>JavaScript 基本语法</h1><ul><li>语句和表达式的区别在于， 前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个 值。</li><li>如果变量赋值的时候，忘了写 var 命令，这条语句也是有效的。 </li><li><ol><li>var a = 1; 2. // 基本等同 3. a = 1; </li><li>但是，不写 var 的做法，不利于表达意图，而且容易不知不觉地创建全局变量，所以建议总是使 用 var 命令声明变量。</li></ol></li></ul><ul><li><p>变量提升</p><p>JavaScript引擎的工作方式是，先解析代码，获取所有被声明的变量，然后再一行一行地运行。因此，所有变量的声明语句，都会提前到代码头部。因此叫变量提升</p><pre class="line-numbers language-none"><code class="language-none">console.log(a);var a;//实际上不会报错 因为变量提升<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>注释</p></li></ul><pre class="line-numbers language-none"><code class="language-none">// 单行注释多行注释/*  我是秦绿玺*/ &lt;!-- haha --&gt;  单行注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>条件语句</li></ul><pre class="line-numbers language-none"><code class="language-none">// if语句if (m === 3) {console.log(m)}// '===' 严格相等运算符  '==' 相等运算符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>严格相等与相等的区别</li></ul><p>相等运算符（ == ）比较两个值是否相等， 自动转化同类型</p><p>严格相等运算符（ === ）比较它 们是否为“同一个值”。 既要相等又得为同一个类型</p><ul><li>switch 语句</li></ul><pre class="line-numbers language-none"><code class="language-none">switch (fruit) {   case 'banana' :   banana();   break;   case 'apple'  :   apple();   break;   default:   console.log('啥也没有选上')   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>三元运算符</p><pre class="line-numbers language-none"><code class="language-none">(条件) ? 表达式1 : 表达式2var mag = '数字' + n + '是' + (n % 2 === 0 ? '偶数' : '奇数')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>标签 ( label ) 相当于定位符，用于跳转到程序的任意位置</p><pre class="line-numbers language-none"><code class="language-none"> top: for (var i = 0; i &lt; 3; i++){ for (var j = 0; j &lt; 3; j++){ if (i === 1 &amp;&amp; j === 1) break top; console.log('i=' + i + ', j=' + j); } }// 直接跳出双层循环<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终身学习</title>
      <link href="/sword__song__blog/2021/04/20/zhong-shen-xue-xi/"/>
      <url>/sword__song__blog/2021/04/20/zhong-shen-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="《终身成长》"><a href="#《终身成长》" class="headerlink" title="《终身成长》"></a>《终身成长》</h1><h6 id="成长是一辈子的事儿-，-他无关年纪。"><a href="#成长是一辈子的事儿-，-他无关年纪。" class="headerlink" title="成长是一辈子的事儿 ， 他无关年纪。"></a>成长是一辈子的事儿 ， 他无关年纪。</h6><h6 id="无论何时，停止成长，才是最可怕的衰老"><a href="#无论何时，停止成长，才是最可怕的衰老" class="headerlink" title="无论何时，停止成长，才是最可怕的衰老"></a>无论何时，停止成长，才是最可怕的衰老</h6><p>从这本书中，收获最大的是</p><h5 id="谦逊"><a href="#谦逊" class="headerlink" title="谦逊"></a>谦逊</h5><p>典型的<strong>固定型思维</strong>的人认为人的才能是一成不变的。在日常的行为举止中，时刻想要证明自己的智力、个性和特征。他们把发生的事情当作衡量能力和价值的直接标尺。</p><p>你有没有中招啊？</p><p>而<strong>成长性思维</strong>的人认为，人的能力是可以努力培养的。虽然人的先天才能、性格、资质都各有偏差，但都可以通过努力来改变。</p><p>我们从几个方面来探讨这两个模式</p><ul><li><p>对自身的客观评价</p><p>  固定思维的人都自视甚高，对自己能力评估非好即坏，不免夸大或模糊</p><p>  成长性思维，用发展的眼光看待自己。相信自己可以培养，更加开放的心态来评估自己的现有水平，因此更准确</p></li><li><p>对失败的看法</p><p>  固定型思维，失败是一种行为，一种身份。因此他们无法正确的看待失败，无法接受失败的自己</p><p>  成长型思维，即便失败的痛苦的，但是不能对自己下定义，他只是需要面临和解决的一个问题。从失败和挫折中收益，让自己变得更强大</p></li></ul><p>成长型思维的人能明确目标，不断优化学习方法，并乐于向同伴学习。也就谓之，不摆架子，谦虚向他人学习，同时对于自己的失败以及成功，可以很好的从中受益，并且让自己好好成长。</p><h3 id="如何成为成长型思维的人"><a href="#如何成为成长型思维的人" class="headerlink" title="如何成为成长型思维的人"></a>如何成为成长型思维的人</h3><ul><li><p><strong>接受</strong> </p><p>  每个人多多少少会有固定型思维，当我们发现时，我们不必感到羞愧，我们首先得承认面对他</p></li><li><p><strong>观察</strong></p><p>  观察你的固定型思维人格，明确他出现的原因。</p></li><li><p><strong>命名</strong></p><p>  给自己固定型思维起个名字，用来警醒自己</p></li><li><p><strong>教育</strong></p><p>  用成长型思维模式与他沟通，教育他。</p></li></ul><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>正如作者所说，改变也许艰难，却未有人说过不值得。</p><p>何况，你我都是对自己有要求的人，不是吗？</p><p><strong>参考：</strong>樊登读书《终身成长》 作者：卡罗尔 德韦克</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 成长型思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+github个人博客搭建教程</title>
      <link href="/sword__song__blog/2021/04/10/hexo-github-ge-ren-bo-ke-da-jian-jiao-cheng/"/>
      <url>/sword__song__blog/2021/04/10/hexo-github-ge-ren-bo-ke-da-jian-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-github-gitee-个人博客搭建"><a href="#Hexo-github-gitee-个人博客搭建" class="headerlink" title="Hexo + github/gitee 个人博客搭建"></a>Hexo + github/gitee 个人博客搭建</h1><h2 id="一、知识储备"><a href="#一、知识储备" class="headerlink" title="一、知识储备"></a>一、知识储备</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><a href="https://hexo.io/zh-cn/docs/">Hexo</a></h3><ul><li><p>快速 、简洁且高效的博客框架，使用Markdown , 解析文章</p></li><li><p>安装前提： node.js   Git   </p><p>可想而知 ，hexo博客搭建过程以及后续的博客更新是基于git分布式版本控制系统、node.js</p><p>安装教程请看官方文档  <a href="https://hexo.io/zh-cn/docs/">官方文档</a></p></li><li><p>文件目录</p><pre class="line-numbers language-none"><code class="language-none">.├── _config.yml       //网站配置信息 （常用）├── package.json     //应用程序信息├── scaffolds//模板文件夹├── source//存放资源文件夹 |   ├── _drafts|   └── _posts└── themes//主题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>在 <code>_config.yml</code> 中修改大部分的配置。同理于themes中的_config.yml  <a href="https://hexo.io/zh-cn/docs/configuration">详情</a></p></li><li><p>常用命令</p><pre class="line-numbers language-none"><code class="language-none">// 在文件夹中创建网站hexo init [folder]  // 新建一篇名为title 的博客 hexo new 'title'  // 简写=&gt;   hexo n 'title'// 生成静态文件hexo g hexo g -d //生成立即部署网站// 清除缓存 (修改文件无法完成生成或生成无效)hexo clean//发表草稿hexo p// 启动本地服务器 (hexo框架对博客文件具有实时刷新的特性 ，因此 本地服务器常常用来查看效果)hexo s //部署网站hexo d//渲染文件hexo render &lt;file1&gt; ...// 查看文件hexo list type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210420145244764.png" alt="hexo_list"></p></li><li><p>其他内容详情请看 <a href="https://hexo.io/zh-cn/docs/">官方文档</a></p></li></ul><h3 id="gitee-github"><a href="#gitee-github" class="headerlink" title="gitee /  github"></a><a href="https://gitee.com/">gitee</a> /  <a href="https://github.com/">github</a></h3><ul><li><p>相同点</p><ul><li>代码托管 协作开发的 软件项目托管平台</li><li>开源软件仓库</li><li>基于git</li><li>支持静态网站服务 ⭐ </li></ul></li><li><p>不同点</p><ul><li><p>gitee 访问稳定 速度快 ，github访问不稳定 ⭐</p></li><li><p>github 相比于 gitee 用户丰富， 开源软件丰富 ， 库多</p></li></ul></li></ul><h2 id="二、教程"><a href="#二、教程" class="headerlink" title="二、教程"></a>二、教程</h2><h3 id="hexo-gitee-访问速度快，首选"><a href="#hexo-gitee-访问速度快，首选" class="headerlink" title="hexo+gitee (访问速度快，首选)"></a>hexo+gitee (访问速度快，首选)</h3><h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><ul><li><p><strong>node.js</strong> <a href="https://nodejs.org/zh-cn/">下载链接</a></p><p>按照提示安装即可</p><p>成功标志 </p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421114837026.png" alt="image-20210421114837026"></p></li><li><p><strong>git</strong>  <a href="https://git-scm.com/">下载链接</a></p><p>按照提示安装即可</p><p>成功标志  鼠标右键可以出现</p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421114938002.png" alt="image-20210421114938002"></p></li></ul><h3 id="2-Hexo-安装"><a href="#2-Hexo-安装" class="headerlink" title="2. Hexo 安装"></a>2. Hexo 安装</h3><ol><li><p>新建文件夹  ===&gt; 想要存放博客系统的路径</p></li><li><p>双击进入建好的文件夹 鼠标右键</p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421115427561.png" alt="image-20210421115427561"></p></li><li><p>进行hexo 命令安装</p><pre class="line-numbers language-none"><code class="language-none">//安装目录结构npm install hexo-cli -g     //初始化hexo init //项目运行 命令含义详见文首知识储备hexo clean hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hexo init 报错 ：权限不够</p><p>鼠标右键点击开始右键 ===&gt; windows PowerShell </p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421120726442.png" alt="image-20210421120726442"></p><p>进入自己的安装目录 进行安装</p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421120851803.png" alt="image-20210421120851803"></p><p>项目初始化完成 可见目录</p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421120554405.png" alt="image-20210421120554405"></p><p>项目运行</p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421120953591.png" alt="image-20210421120953591"></p><p>进入链接 安装成功！</p><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/image-20210421121046760.png" alt="image-20210421121046760"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人简介</title>
      <link href="/sword__song__blog/2021/04/04/ni-hao/"/>
      <url>/sword__song__blog/2021/04/04/ni-hao/</url>
      
        <content type="html"><![CDATA[<h1 id="Hi-，你好呀"><a href="#Hi-，你好呀" class="headerlink" title="Hi ，你好呀"></a>Hi ，你好呀</h1><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20200421103440.png" alt="白小剑" style="zoom:25%;"><p>我是白小剑，你可以叫我宋剑儿。</p><p>别为我为啥起这个名儿，</p><p>剑未配妥，出门已是江湖。</p><p>千帆过尽，归来仍是少年。</p><h4 id="在这里，我会不定期的更新两个板块："><a href="#在这里，我会不定期的更新两个板块：" class="headerlink" title="在这里，我会不定期的更新两个板块："></a>在这里，我会不定期的更新两个板块：</h4><h5 id="1、作为一个编程小白，力所能及给大家带来学习编程的知识总结，以及学习小技巧。"><a href="#1、作为一个编程小白，力所能及给大家带来学习编程的知识总结，以及学习小技巧。" class="headerlink" title="1、作为一个编程小白，力所能及给大家带来学习编程的知识总结，以及学习小技巧。"></a>1、作为一个编程小白，力所能及给大家带来学习编程的知识总结，以及学习小技巧。</h5><h5 id="2、记录好玩，想把世界上的有趣都分享给大家。"><a href="#2、记录好玩，想把世界上的有趣都分享给大家。" class="headerlink" title="2、记录好玩，想把世界上的有趣都分享给大家。"></a>2、记录好玩，想把世界上的有趣都分享给大家。</h5><p><img src="https://gitee.com/song-zejian/markdown_image/raw/master/img/23.jpg"></p><h2 id="感谢你的到来，以后的日子我们就做伴了！"><a href="#感谢你的到来，以后的日子我们就做伴了！" class="headerlink" title="感谢你的到来，以后的日子我们就做伴了！"></a>感谢你的到来，以后的日子我们就做伴了！</h2>]]></content>
      
      
      <categories>
          
          <category> 个人简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 启航 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
